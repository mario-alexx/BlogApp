@page "/crear-post"
@using BlogClienteWasm.Modelos
@using BlogClienteWasm.Servicios.IServicio
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigationManager
@inject IPostServicio postServicio
@inject IJSRuntime JsRuntime
@attribute [Authorize]


<h1 class="text-center">Crear Post</h1>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h4 class="card-title text-dark">Nuevo Post</h4>
            </div>

        </div>
    </div>
    <div class="card-body">
        <EditForm Model="CrearPost" OnValidSubmit="@( () => ManejadorOnCrearPost())">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="container">
                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Título:</label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="CrearPost.Titulo" class="form-control" placeholder="Ingrese el titulo" />
                            <ValidationMessage For="() => CrearPost.Titulo" />
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Descripción:</label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="CrearPost.Descripcion" class="form-control" placeholder="Ingrese la descripción" />
                            <ValidationMessage For="() => CrearPost.Descripcion" />
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Etiquetas:</label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="CrearPost.Etiqueta" class="form-control" placeholder="Ingrese las etiquetas" />
                            <ValidationMessage For="() => CrearPost.Etiqueta" />
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-6">
                            <h4>Imagen Post</h4>
                            <InputFile OnChange="@ManejadorOnSudidaArchivo"/>
                            <br />
                            @if (imagenPost != null)
                            {
                                <div>
                                    <img src="@imagenPost" style="width:300px" />
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <button type="submit" class="btn btn-success"><i class="bi bi-gear-fill">&nbsp; Guardar</i></button>
                        </div>
                        <div class="col-6">
                            <NavLink href="posts" class="btn btn-secondary"><i class="bi bi-arrow-left-circle-fill"></i>&nbsp; Volver</NavLink>
                        </div>
                    </div>
                </div>

            </div>
        </EditForm>
    </div>
</div>


@code {
    private Post CrearPost { get; set; } = new Post();

    [Parameter]
    public string imagenPost{ get; set; }
    [Parameter]
    public EventCallback<string> OnChange { get; set; }

    private async Task ManejadorOnCrearPost()
    {
        CrearPost.RutaImagen = imagenPost;
        var crearPost = await postServicio.CrearPost(CrearPost);
        await JsRuntime.ToastrSuccess("Post creado correctamente");
        navigationManager.NavigateTo("posts");
    }

    private async Task ManejadorOnSudidaArchivo(InputFileChangeEventArgs e)
    {
        IBrowserFile imageFile = e.File;

        //Redimensionar la imagen 
        if (imageFile != null)
        {
            var resizedFile = await imageFile.RequestImageFileAsync("image/png", 1000, 700);

            using(Stream ms = resizedFile.OpenReadStream(resizedFile.Size))
            {
                var content = new MultipartFormDataContent();
                content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);

                imagenPost = await postServicio.SubidaImagen(content);
                await OnChange.InvokeAsync(imagenPost);
            }
        }
    }

}
